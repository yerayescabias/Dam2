package paagbi.controller;

import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import paagbi.model.Umea;
import paagbi.model.UmeaRepository;

@RestController // This means that this class is a Controller baina @Controller bakarrik
				// jarrita, PUT eta DELETEak ez dabiz
@RequestMapping(path = "/gabonak") // This means URL's start with /gabonak (after Application path)
public class MainController {
	@Autowired // This means to get the bean called umeaRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UmeaRepository umeaRepository;

	@GetMapping(path = "/umeguztiak")
	public @ResponseBody Iterable<Umea> getAllUmeak() {
		// This returns a JSON or XML with the users
		return umeaRepository.findAll();
	}

	@PostMapping(path = "/umeberria") // Map ONLY POST Requests
	public @ResponseBody String addNewUmea(@RequestParam String izena, @RequestParam List<String> opariak) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Umea u = new Umea();
		u.setIzena(izena);
		u.setOpariak(opariak);
		umeaRepository.save(u);
		return "Saved";
	}

	@PutMapping(value = "/opariberria/{umeaId}")
	public ResponseEntity<Umea> updateUmea(@Valid @RequestParam String opBerria, @PathVariable String umeaId) {
		try {
			Umea umea = umeaRepository.findById(umeaId);
			List<String> opariak = umea.getOpariak();
			opariak.add(opBerria);
			umea.setOpariak(opariak);
			umeaRepository.save(umea);

			return ResponseEntity.ok().build();

		} catch (Exception ex) {
			return ResponseEntity.notFound().build();
		}
	}

	@DeleteMapping(path = "/delete/{umearenIzena}")
	public @ResponseBody long deleteUmea(@PathVariable String umearenIzena) {
		try {
			long zenbat = umeaRepository.delete(umearenIzena);
			//System.out.println("Ezabatutako ume kopuruaðŸ”†: " + zenbat);
			return zenbat;

		} catch (Exception ex) {
			System.out.println("Errorea " + umearenIzena + " umea ezabatzerakoan. ");
			return 0;
		}
	}

	@GetMapping(path = "/oparikopurua/{umearenIzena}")
	public @ResponseBody long opariKop(@PathVariable String umearenIzena) {
		{
			try {
				long zenbat = umeaRepository.findOpariKopuruaUmeko(umearenIzena);
				System.out.println(umearenIzena + " umeak " + zenbat+" opari eskatu ditu.");
			//	return ResponseEntity.ok().build();
			    return zenbat;

			} catch (Exception ex) {
				System.out.println("Errorea " + umearenIzena + " umea ezabatzerakoan. ");
				return 0;
			}
		}
	}

	@GetMapping(path = "/opariAnitzekoUmeak")
	public @ResponseBody Iterable<Umea> getUmeOpariAskodunak(){
		// This returns a JSON or XML with the users
		return umeaRepository.findUmeOpariAskodunak();
	}
}
